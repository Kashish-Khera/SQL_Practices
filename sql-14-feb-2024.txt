14 Feb 

URL :https://www.sql-practice.com/
northwindDB
level = easy + medium

Q1 : Show all the even numbered Order_id from the orders table

ANS 1 :
 SELECT order_id
FROM orders
WHERE order_id % 2 = 0;

ANS 2:
 SELECT order_id
FROM orders
WHERE mod(order_id,2)=0;

NOTE : The MOD() function returns the remainder of a number divided by another number.
Syntax
MOD(x, y)  OR:  x MOD y  OR:  x % y

Example : SELECT 18 MOD 4; Return the remainder of 18/4:

Q2 : Show the city, company_name, contact_name of all customers from cities which contains the letter 'L' in the city name, sorted by contact_name

ANS : Select city , company_name , contact_name from customers
where city like "%L%" order by contact_name

Q3 : Show the company_name, contact_name, fax number of all customers that has a fax number. (not null)

ANS : Select company_name , contact_name , fax from customers
where fax is NOT NULL

Q4 : Show the first_name, last_name. hire_date of the most recently hired employee.

ANS 1 : Select first_name , last_name , Max(hire_date) from employees

ANS 2 : SELECT first_name, last_name, hire_date
FROM employees
ORDER BY hire_date DESC
LIMIT 1;

Q5 : Show the average unit price rounded to 2 decimal places, the total units in stock, total discontinued products from the products table.

ANS : 
SELECT round(avg(Unit_Price), 2) AS average_price,
SUM(units_in_stock) AS total_stock,
SUM(discontinued) as total_discontinued
FROM products;

NOTE :  The ROUND() function rounds a number to a specified number of decimal places.
SYNTAX : ROUND(number, decimals, operation)

Parameter	Description
number	Required. The number to be rounded
decimals	Required. The number of decimal places to round number to
operation	Optional. If 0, it rounds the result to the number of decimal. If another value than 0, it truncates the result to the number of decimals. Default value is 0
EX : SELECT ROUND(235.415, 2, 1) AS RoundValue;

Q6 : Show the ProductName, CompanyName, CategoryName from the products, suppliers, and categories table

ANS : SELECT p.product_name, s.company_name, c.category_name
FROM products p
JOIN suppliers s ON s.supplier_id = p.Supplier_id
JOIN categories c On c.category_id = p.Category_id;

Q7 : Show the category_name and the average product unit price for each category rounded to 2 decimal places.

ANS : select c.category_name , Round(avg(p.unit_price), 2) 
from categories c
Join products p On p.category_id = c. category_id
group by c.category_name


Q8 : Show the city, company_name, contact_name from the customers and suppliers table merged together.
Create a column which contains 'customers' or 'suppliers' depending on the table it came from.

ANS : 
SELECT city, company_name, contact_name, 'customers' AS source
FROM customers
UNION
SELECT city, company_name, contact_name, 'suppliers' AS source
FROM suppliers;


NOTE : 
The SQL UNION Operator
The UNION operator is used to combine the result-set of two or more SELECT statements.

Every SELECT statement within UNION must have the same number of columns
The columns must also have similar data types
The columns in every SELECT statement must also be in the same order
UNION Syntax
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;
UNION ALL Syntax
The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:

SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;
Note: The column names in the result-set are usually equal to the column names in the first SELECT statement.



